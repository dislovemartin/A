name: Unified CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 0 * * 1'  # Weekly on Monday

jobs:
  initialize:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      # Enhanced caching strategy
      - name: Cache Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            ~/.cache/pip
            ~/.cargo/registry
            ~/go/pkg/mod
            .next/cache
          key: ${{ runner.os }}-deps-${{ hashFiles('**/package-lock.json', '**/requirements.txt', '**/Cargo.lock', '**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-deps-

  quality:
    needs: initialize
    runs-on: ubuntu-latest
    strategy:
      matrix:
        language: [python, javascript, rust, go, cpp, deno, shell, yaml, json]
    steps:
      - uses: actions/checkout@v3
      
      # Set up environments based on language
      - name: Set up Environment for ${{ matrix.language }}
        run: |
          if [ "${{ matrix.language }}" == "python" ]; then
            sudo apt-get update
            sudo apt-get install -y python3-pip
            pip install black flake8 mypy bandit
          elif [ "${{ matrix.language }}" == "javascript" ]; then
            npm install
          elif [ "${{ matrix.language }}" == "rust" ]; then
            curl https://sh.rustup.rs -sSf | sh -s -- -y
            source $HOME/.cargo/env
            cargo install cargo-audit
          elif [ "${{ matrix.language }}" == "go" ]; then
            go install github.com/securego/gosec/v2/cmd/gosec@latest
          elif [ "${{ matrix.language }}" == "cpp" ]; then
            sudo apt-get install -y clang-format cppcheck
          elif [ "${{ matrix.language }}" == "deno" ]; then
            curl -fsSL https://deno.land/x/install/install.sh | sh
            export DENO_INSTALL="/home/runner/.deno"
            export PATH="$DENO_INSTALL/bin:$PATH"
          elif [ "${{ matrix.language }}" == "shell" ]; then
            sudo apt-get install -y shellcheck
          elif [ "${{ matrix.language }}" == "yaml" ]; then
            pip install yamllint
          elif [ "${{ matrix.language }}" == "json" ]; then
            npm install -g jsonlint
          fi
      
      # Run linters and static analysis
      - name: Run Linters and Static Analysis for ${{ matrix.language }}
        run: |
          if [ "${{ matrix.language }}" == "python" ]; then
            black --check src/ tests/
            flake8 src/ tests/
            mypy src/
            bandit -r src/
          elif [ "${{ matrix.language }}" == "javascript" ]; then
            npm run lint
            npx prettier --check .
          elif [ "${{ matrix.language }}" == "rust" ]; then
            cargo clippy -- -D warnings
            cargo fmt -- --check
            cargo audit
          elif [ "${{ matrix.language }}" == "go" ]; then
            golint ./...
            gofmt -l .
            gosec ./...
          elif [ "${{ matrix.language }}" == "cpp" ]; then
            clang-format -n src/**/*.cpp src/**/*.h
            cppcheck --enable=all src/
          elif [ "${{ matrix.language }}" == "deno" ]; then
            deno lint
            deno check
          elif [ "${{ matrix.language }}" == "shell" ]; then
            shellcheck install_dependencies.sh ai_platform_setup.sh static_analysis.sh complexity_analyzer.sh dependency_analyzer.sh automated_deploy.sh
          elif [ "${{ matrix.language }}" == "yaml" ]; then
            yamllint .
          elif [ "${{ matrix.language }}" == "json" ]; then
            jsonlint ./*.json
          fi
      
      # Run AI-Powered Code Analysis (SonarQube)
      - name: Run SonarQube Analysis for ${{ matrix.language }}
        if: matrix.language != 'shell' && matrix.language != 'yaml' && matrix.language != 'json'
        run: |
          sonar-scanner \
            -Dsonar.projectKey=your-project-key \
            -Dsonar.sources=src/ \
            -Dsonar.host.url=https://sonarqube.yourdomain.com \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}
      
      # Upload Logs if Any Failures
      - name: Upload Logs on Failure
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.language }}-error-logs
          path: ./logs/

  security:
    needs: quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Security Scan
        run: |
          snyk test
          trivy fs .
          
      - name: SAST Analysis
        run: |
          sonar-scanner \
            -Dsonar.projectKey=${{ github.repository }} \
            -Dsonar.organization=${{ secrets.SONAR_ORG }}

  performance:
    needs: security
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Performance Tests
        run: |
          k6 run load-tests/api-test.js
          lighthouse --output json --output-path=./lighthouse-report.json ${{ secrets.PROD_URL }}

  deploy:
    if: github.ref == 'refs/heads/main'
    needs: [quality, security, performance]
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to Kubernetes
        run: |
          kubectl apply -k kubernetes/overlays/production
          
      - name: Health Check
        run: |
          ./scripts/health_check.sh ${{ secrets.PROD_URL }} 