name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      # Node.js Cache
      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Python Cache
      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # Rust Cache
      - name: Cache Rust crates
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      # Go Modules Cache
      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/python_service/requirements.txt

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Install Node.js Dependencies
        run: npm install

      - name: Run Linters
        run: |
          black --check src tests
          flake8 src tests
          mypy src

      - name: Run Tests
        run: |
          python -m unittest discover -s tests/unit
          python -m unittest discover -s tests/integration
          python -m unittest discover -s tests/e2e

      - name: Build Docker Images
        run: |
          docker build -t yourusername/ai_chatbot:latest -f deployment/docker/ai_chatbot.Dockerfile .
          docker build -t yourusername/healthcare_ai:latest -f deployment/docker/healthcare_ai.Dockerfile .

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Deploy to EKS
        run: |
          aws eks update-kubeconfig --name your-cluster-name
          kubectl apply -f deployment/k8s/

  terraform:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.0.11

      - name: Terraform Init
        working-directory: ./infra/terraform
        run: terraform init

      - name: Terraform Plan
        working-directory: ./infra/terraform
        run: terraform plan

      - name: Terraform Apply
        working-directory: ./infra/terraform
        run: terraform apply -auto-approve
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  security-audit:
    runs-on: ubuntu-latest
    needs: [deploy, terraform]
    steps:
      - name: Advanced Security Scan
        run: |
          npm audit --audit-level=moderate
          cargo audit
          snyk test --severity-threshold=medium
          snyk monitor --org=${{ secrets.SNYK_ORG_ID }}
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  monitor-deployment:
    runs-on: ubuntu-latest
    needs: security-audit
    steps:
      - name: Monitor Deployment
        run: |
          # Monitor deployment health
          attempts=0
          until aws ecs describe-services --cluster your-cluster --services your-service --query 'services[0].status' | grep "ACTIVE"
          do
            if [ $attempts -eq 5 ]; then
              echo "Deployment health check failed"
              exit 1
            fi
            attempts=$((attempts+1))
            sleep 30
          done
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  reporting:
    runs-on: ubuntu-latest
    needs: monitor-deployment
    steps:
      - name: Generate Detailed Report
        run: |
          {
            echo "## Deployment Summary $(date)"
            echo "### Status Overview"
            echo "- Environment: Production"
            echo "- Build ID: ${{ github.run_id }}"
            echo "- Commit: ${{ github.sha }}"
            echo "### Health Checks"
            echo "- Security Scans: ✅"
            echo "- Performance Tests: ✅"
            echo "- Deployment Status: ✅"
          } > deployment-report.md

      - name: Upload Report
        uses: actions/upload-artifact@v2
        with:
          name: deployment-report
          path: deployment-report.md

      - name: Send Report Notification
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"Deployment report generated and uploaded."}' ${{ secrets.SLACK_WEBHOOK_URL }}

